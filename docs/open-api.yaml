openapi: 3.0.3

info:
  title: Event Planning App RESTful API Project
  version: "1.0"
  description: The Event Planning App RESTful API Project is an application used for creating and managing events.
  contact:
    name: Developer 
    email: dimas.yudhana@gmail.com
    url: https://github.com/dimasyudhana
  license:
    name: APACHE 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

externalDocs:
  description: Visit the Event Planning App GitHub repository for more information.
  url: https://github.com/wanta-zulfikri/Event-Planning-App.git

servers:
  - url: https://{environment}.eventplanningapp.com/api/v1
    description: "Event Planning App RESTful API Servers"
    variables:
      environment:
        enum:
          - deployment
          - localhost:8080
        default: localhost:8080
  - url: https://deployment.eventplanningapp.com/api/v1
    description: "Production server"
  - url: https://localhost:8000/
    description: "Local development server"

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Endpoint register new user to the database
      requestBody:
          $ref: '#/components/requestBodies/RequestRegisterUser'
      responses:
        '200':
          $ref: '#/components/responses/Response200Register'  
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'
  
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Endpoint login user to the web-application
      requestBody: 
        $ref: '#/components/requestBodies/RequestLoginUser'
      responses:
        '200':
          $ref: '#/components/responses/Response200Login'
        '400':
          $ref: '#/components/responses/Response400'
        '500':
          $ref: '#/components/responses/Response500'

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token obtained upon successful login"

  requestBodies:
    RequestRegisterUser:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/UsersSchemaRegister'

    RequestLoginUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersSchemaLogin'

  responses:

    Response200Register:
      description: Successful registration
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Success Create an Account"

    Response200Login:
      description: Successful login
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 200
              message:
                type: string
                example: "Successful login, please use this token for further access."
              token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InBldGVyemFsYWlAZ21haWwuY29tIiwicGFzc3dvcmQiOiJAU2VjcmV0MTIzIn0.BZq48TAx5wci2LH48KW5geslrGR2ybr0-5Wol-HyDkI"

    Response400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad Request"

    Response404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              message:
                type: string
                example: "The requested resource was not found. Please check your email and password input."


    Response500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 500
              message:
                type: string
                example: "Internal Server Error"

  schemas:
    UsersSchemaRegister:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        password:
          type: string
          format: password
        image:
          type: string
          format: binary
      example:
        name: "Peter Zalai"
        username: "peterzalai"
        email: "peterzalai@gmail.com"
        phone: "+6281235288543"
        address: "Denpasar, Bali"
        password: "@Secret123"
        image: "peterzalai.png"
    UsersSchemaLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        email: "peterzalai@gmail.com"
        password: "@Secret123"

  ####################################
  #  Events
  ####################################

  /Events:
    get:
      tags:
        - Event
      summary: List all Event 
      responses:
        200:
          description: "Get all Event"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/EventSchemaGetallEvent"
              example:
                data:
                  [
                    {
                      "name": "Webinar: Your Product Manager Career by PlayStation Sr PM",
                      "hosted_by": "Product School",
                      "date": "2023-04-14T15:59:21.150Z",
                      "location": "Jakarta",
                      "details": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                      "event_picture": "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    },
                    {
                      "name": "udemy: golang goroutines",
                      "hosted_by": "Product Udemy",
                      "date": "2023-04-15T15:59:21.150Z",
                      "location": "Jakarta",
                      "details": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                      "event_picture": "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
                    },
                    {
                      "name": "hackerrank: golang goroutines",
                      "hosted_by": "Product Udemy",
                      "date": "2023-04-15T15:59:21.150Z",
                      "location": "Jakarta",
                      "details": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                      "event_picture": "https://kurabsent.s3.amazonaws.com/2022-07-06%2006%3A40%3A47.jpg",
  
                    },
                  ]
                message: "success show all event"
        