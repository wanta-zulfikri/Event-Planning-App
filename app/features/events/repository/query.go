package repository

import (
	"log"

	"github.com/wanta-zulfikri/Event-Planning-App/app/features/events"
	"github.com/wanta-zulfikri/Event-Planning-App/app/features/tickets/repository"
	"gorm.io/gorm"
)

type EventRepository struct {
	db *gorm.DB
}

func New(db *gorm.DB) *EventRepository {
	return &EventRepository{db: db}
}

func (er *EventRepository) CreateEventWithTickets(tx *gorm.DB, event events.Core, userID uint) error {
	if err := er.CreateEvent(tx, event, userID); err != nil {
		if tx != nil {
			tx.Rollback()
		}
		return err
	}

	// gunakan last event id yang terakhir diinsert unutk create ticket setelah after create event selesai maka gunakan id event  sebagai FK pada create ticket tabel untuk mendapatkan laukan proses selanjutnya

	eventID := uint(event.ID)
	log.Printf("Event ID : %v", eventID)

	if err := er.CreateTickets(tx, event, eventID); err != nil {
		if tx != nil {
			tx.Rollback()
		}
		return err
	}

	return nil
}

func (er *EventRepository) CreateEvent(tx *gorm.DB, event events.Core, userID uint) error {
	newEvent := Event{
		Title:       event.Title,
		Description: event.Description,
		EventDate:   event.EventDate,
		EventTime:   event.EventTime,
		Status:      event.Status,
		Category:    event.Category,
		Location:    event.Location,
		Image:       event.Image,
		Hostedby:    event.Hostedby,
		UserID:      userID,
	}

	if tx != nil {
		if err := tx.Table("events").Create(&newEvent).Error; err != nil {
			log.Println(err.Error())
			return err
		}
	} else {
		if err := er.db.Table("events").Create(&newEvent).Error; err != nil {
			log.Println(err.Error())
			return err
		}
	}

	// set the event ID to the ID generated by the database
	event.ID = newEvent.ID
	log.Printf("Event ID: %v", event.ID)

	return nil
}

func (er *EventRepository) CreateTickets(tx *gorm.DB, event events.Core, eventID uint) error {
	for _, ticket := range event.Tickets {
		newTicket := repository.Ticket{
			Title:          ticket.Title,
			TicketType:     ticket.TicketType,
			TicketCategory: ticket.TicketCategory,
			TicketPrice:    ticket.TicketPrice,
			TicketQuantity: ticket.TicketQuantity,
			EventID:        eventID, // use the correct event ID
		}

		if tx != nil {
			if err := tx.Table("tickets").Create(&newTicket).Error; err != nil {
				log.Println(err.Error())
				return err
			}
		} else {
			if err := er.db.Table("tickets").Create(&newTicket).Error; err != nil {
				log.Println(err.Error())
				return err
			}
		}
	}

	return nil
}
